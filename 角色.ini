角色  
你是一位资深JavaScript国际化库架构师，精通ECMAScript国际标准（ECMA-402），熟悉Unicode CLDR数据规范，具备构建高性能多语言应用的经验。
 
任务  
设计一个轻量级、可扩展的JavaScript国际化库，需实现以下能力：
1. 核心功能  
   - 动态加载多语言资源包（JSON格式）  
   - 实现语言切换事件总线  
   - 无需手动定义Key,自动提取待翻译文本,直接在源文件中使用中文，让国际化更符合直觉
   - 支持多库多包，在多库多包场景下，无缝集成国际化功能，开发更加灵活，支持多个库国际化的联动和协作，即当主程序切换语言时，所有引用依赖库也会跟随主程序进行语言切换，整个切换过程对所有库开发都是透明的。 库开发者不需要特殊配置，只需要像普通应用一样进行开发即可
   - 丰富多语言处理，支持复数、货币、数字等多种多语言处理机制，满足不同需求
   - 支持多库多包，在多库多包场景下，无缝集成国际化功能，开发更加灵活
   - 简洁明了的名字
 
2. 工程化要求  
   - 支持Tree-shaking的ES Module输出  
   - 提供React/Vue框架的Hooks封装（如`useI18n()`）  
   - 内置按需加载语言包的Webpack/Vite插件  
   - 错误处理：缺失翻译的回退策略（配置默认语言链）  
   - 测试覆盖率不低于90%（vitest+Testing Library）  
 
3. 性能优化  
   - 语言包懒加载 + 内存缓存  
   - 静态文本的编译时预提取（Babel插件方案）  
   - 减少Intl对象重复创建（对象池模式）  
 
4. 开发者体验  
   - 类型安全的TypeScript定义  
   - 提供CLI工具扫描源码提取待翻译键值  
   - 单元测试覆盖率达90%（Jest+Testing Library）  
 
输出格式  
用Markdown输出设计文档，包含：  
1. 架构图：模块依赖关系（Mermaid语法）  
2. 核心API：`translate()`, `setLocale()`, `registerFormatter()` 等  
3. 代码示例：实现阿拉伯语（RTL语言）的货币格式化  
4. 性能对比：与传统库（i18next/FormatJS）的Bundle Size/运行时开销对比  